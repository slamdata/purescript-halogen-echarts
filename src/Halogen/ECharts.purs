-- | This module defines an adapter between Halogen's widget API and
-- | the `purescript-echarts` library.

module Halogen.ECharts 
  ( ECEffects()
  , EChartsEvent()
  , chart
  ) where

import DOM

import Data.Int
import Data.Maybe

import Data.DOM.Simple.Types
import Data.DOM.Simple.Element
import Data.DOM.Simple.Window
import Data.DOM.Simple.Document

import Control.Monad (when)
import Control.Monad.Eff
import Control.Monad.Eff.Ref

import qualified ECharts.Chart as EC
import qualified ECharts.Options as EC
import qualified ECharts.Effects as EC

import Halogen.HTML.Widget
import Halogen.Internal.VirtualDOM (Widget())

type ECEffects eff = ( echartInit :: EC.EChartInit
                     , echartSetOption :: EC.EChartOptionSet
                     , echartDispose :: EC.EChartDispose
                     , dom :: DOM 
                     , ref :: Ref
                     | eff)
  
-- | Events generated by an `echarts` component
data EChartsEvent = RequestUpdate
  
-- | Create a component which responds to inputs of type `Option` by updating a
-- | chart component with those options.
-- |
-- | The first argument should be a unique identifier for this component.
-- |
-- | The second argument creates the container element for the chart. It should have
-- | a non-zero height and width.
-- |
-- | The third argument is a version number which can be used to detect when the 
-- | `update` function should be called.
chart :: forall eff. String -> Eff (ECEffects eff) HTMLElement -> Int -> EC.Option -> Widget (ECEffects eff) EChartsEvent
chart id createContainer version opts = widget spec
  where
  spec = { value: version
         , name: "echarts"
         , id: id 
         , init: init
         , update: update
         , destroy: destroy
         }

  -- | `init` creates the container, and requests an update immediately, since the node
  -- | must be on screen before we can call `init` on the `EChart` object.
  -- | The `RefVal` will be populated on the first `update`.
  init :: (EChartsEvent -> Eff (ECEffects eff) Unit) -> Eff (ECEffects eff) { context :: RefVal (Maybe EC.EChart), node :: HTMLElement }
  init driver = do
    div <- createContainer
    ref <- newRef Nothing
    driver RequestUpdate
    return { context: ref, node: div }

  -- | `update` checks the versions, initializes the `EChart` object if necessary and calls
  -- | `setOption`.
  update :: Int -> Int -> RefVal (Maybe EC.EChart) -> HTMLElement -> Eff (ECEffects eff) (Maybe HTMLElement)
  update _ prevVersion ref node = do
    when (version > prevVersion) $ void do
      _ec <- readRef ref
      ec <- case _ec of
        Nothing -> do
          ec <- EC.init Nothing node
          writeRef ref (Just ec)
          return ec
        Just ec -> return ec
      EC.setOption opts false ec
    return Nothing

  -- | `destroy` calls the `destroy` method on the `EChart` object, if it has been initialized.
  destroy :: RefVal (Maybe EC.EChart) -> HTMLElement -> Eff (ECEffects eff) Unit
  destroy ref _ = do
    _ec <- readRef ref
    case _ec of
      Nothing -> return unit
      Just ec -> EC.dispose ec
